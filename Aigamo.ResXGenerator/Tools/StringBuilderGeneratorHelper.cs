using System.Globalization;
using System.Resources;
using System.Text;
using Aigamo.ResXGenerator.Extensions;
using Aigamo.ResXGenerator.Models;

namespace Aigamo.ResXGenerator.Tools;

public class StringBuilderGeneratorHelper
{
	private string ContainerClassName { get; set; }
	private string Indent { get; set; } = "\t";
	private StringBuilder Builder { get; } = new();

	public static string FunctionNamePostFix(IReadOnlyList<ComboItem>? definedLanguages) => string.Join("_", definedLanguages?.Select(x => x.LCID) ?? []);

	public GeneratedOutput GetOutput(string fileName, IntegrityValidator validator) => new(fileName, Builder.ToString(), validator.ErrorsAndWarnings);

	public StringBuilderGeneratorHelper() => ContainerClassName = "Helpers";

	public StringBuilderGeneratorHelper(GenFileOptions options) => ContainerClassName = options.ClassName;

	public void Append(string line) => Builder.Append(line);
	public void AppendLine(string line) => Builder.AppendLine(line);
	public void AppendFormat(string format, params object[] args) => Builder.AppendFormat(format, args);
	public string AppendLanguages(IReadOnlyList<ComboItem> languages)
	{
		var postFix = FunctionNamePostFix(languages);
		Builder.Append(postFix);
		return postFix;
	}

	public void AppendHeader(string @namespace)
	{
		Builder.AppendLine(Constants.AutoGeneratedHeader);
		Builder.AppendLine("#nullable enable");
		Builder.Append("namespace ");
		Builder.Append(@namespace);
		Builder.AppendLine(";");
	}

	public void AppendInnerClass(GenFileOptions options, IntegrityValidator validator)
	{
		if (options.InnerClassVisibility == InnerClassVisibility.NotGenerated) return;

		ContainerClassName = string.IsNullOrEmpty(options.InnerClassName) ? "Resources" : options.InnerClassName;
		if (!string.IsNullOrEmpty(options.InnerClassInstanceName))
		{
			validator.ValidateInconsistentModificator(options);

			Builder.Append(Indent);
			Builder.Append("public ");
			Builder.Append(ContainerClassName);
			Builder.Append(" ");
			Builder.Append(options.InnerClassInstanceName);
			Builder.AppendLine(" { get; } = new();");
			Builder.AppendLine();
		}

		Builder.Append(Indent);
		Builder.Append(GetInnerClassVisibility(options));
		Builder.Append(options.StaticClass ? " static" : string.Empty);
		Builder.Append(options.PartialClass ? " partial class " : " class ");

		Builder.AppendLine(ContainerClassName);
		Builder.Append(Indent);
		Builder.AppendLine("{");

		Indent += "\t";
	}

	public void AppendClassHeader(GenFileOptions options)
	{
		Builder.Append(options.PublicClass ? "public" : "internal");
		Builder.Append(options.StaticClass ? " static" : string.Empty);
		Builder.Append(options.PartialClass ? " partial class " : " class ");
		Builder.AppendLine(options.ClassName);
		Builder.AppendLine("{");
	}

	public void AppendClassFooter(GenFileOptions options)
	{
		if (options.InnerClassVisibility != InnerClassVisibility.NotGenerated)
			Builder.AppendLine("\t}");

		Builder.AppendLine("}");
	}

	public (bool valid, bool resourceAccessByName) GenerateMember(FallBackItem fallbackItem, GenFileOptions options, IntegrityValidator validator)
	{
		string memberName;
		bool resourceAccessByName;

		if (RegexDefinitions.ValidMemberNamePattern.IsMatch(fallbackItem.Key))
		{
			memberName = fallbackItem.Key;
			resourceAccessByName = true;
		}
		else
		{
			memberName = RegexDefinitions.InvalidMemberNameSymbols.Replace(fallbackItem.Key, "_");
			resourceAccessByName = false;
		}


		if (!validator.ValidateMember(fallbackItem, options, ContainerClassName)) return (false, resourceAccessByName);

		Builder.AppendLine();

		Builder.Append(Indent);
		Builder.AppendLine("/// <summary>");

		Builder.Append(Indent);
		Builder.Append("/// Looks up a localized string similar to ");
		Builder.Append(fallbackItem.Value.ToXmlCommentSafe(Indent));
		Builder.AppendLine(".");

		Builder.Append(Indent);
		Builder.AppendLine("/// </summary>");

		Builder.Append(Indent);
		Builder.Append("public ");
		Builder.Append(options.StaticMembers ? "static " : string.Empty);
		Builder.Append("string");
		Builder.Append(options.NullForgivingOperators ? null : "?");
		Builder.Append(" ");
		Builder.Append(memberName);
		return (true, resourceAccessByName);
	}

	public void AppendResourceManagerUsings()
	{
		Builder.Append("using ");
		Builder.Append(Constants.SystemGlobalization);
		Builder.AppendLine(";");

		Builder.Append("using ");
		Builder.Append(Constants.SystemResources);
		Builder.AppendLine(";");

		Builder.AppendLine();
	}

	public void AppendCodeUsings()
	{
		Builder.AppendLine("using static Aigamo.ResXGenerator.Helpers;");
		Builder.AppendLine();
	}

	public void GenerateResourceManagerMembers(GenFileOptions options)
	{
		Builder.Append(Indent);
		Builder.Append("private static ");
		Builder.Append(nameof(ResourceManager));
		Builder.Append("? ");
		Builder.Append(Constants.SResourceManagerVariable);
		Builder.AppendLine(";");

		Builder.Append(Indent);
		Builder.Append("public static ");
		Builder.Append(nameof(ResourceManager));
		Builder.Append(" ");
		Builder.Append(Constants.ResourceManagerVariable);
		Builder.Append(" => ");
		Builder.Append(Constants.SResourceManagerVariable);
		Builder.Append(" ??= new ");
		Builder.Append(nameof(ResourceManager));
		Builder.Append("(\"");
		Builder.Append(options.EmbeddedFilename);
		Builder.Append("\", typeof(");
		Builder.Append(ContainerClassName);
		Builder.AppendLine(").Assembly);");

		Builder.Append(Indent);
		Builder.Append("public ");
		Builder.Append(options.StaticMembers ? "static " : string.Empty);
		Builder.Append(nameof(CultureInfo));
		Builder.Append("? ");
		Builder.Append(Constants.CultureInfoVariable);
		Builder.AppendLine(" { get; set; }");
	}

	private static string GetInnerClassVisibility(GenFileOptions options)
	{
		if (options.InnerClassVisibility == InnerClassVisibility.SameAsOuter)
			return options.PublicClass ? "public" : "internal";

		return options.InnerClassVisibility.ToString().ToLowerInvariant();
	}
}
