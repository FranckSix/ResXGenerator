using System.Globalization;
using System.Resources;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml;
using System.Xml.Linq;
using Aigamo.ResXGenerator.Extensions;
using Aigamo.ResXGenerator.Tools;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Aigamo.ResXGenerator.Generators;

public abstract class StringBuilderGenerator<T> : IGenerator<T>
{
	private static Location GetMemberLocation(GenFileOptions fileOptions, IXmlLineInfo line, string memberName) =>
		Location.Create(
			filePath: fileOptions.GroupedFile.MainFile.File.Path,
			textSpan: new TextSpan(),
			lineSpan: new LinePositionSpan(
				start: new LinePosition(line.LineNumber - 1, line.LinePosition - 1),
				end: new LinePosition(line.LineNumber - 1, line.LinePosition - 1 + memberName.Length)
			)
		);

	public abstract GeneratedOutput Generate(T options, CancellationToken cancellationToken = default);

	protected static StringBuilder GetBuilder(string withNamespace)
	{
		var builder = new StringBuilder();

		builder.AppendLine(Constants.AutoGeneratedHeader);
		builder.AppendLine("#nullable enable");

		builder.Append("namespace ");
		builder.Append(withNamespace);
		builder.AppendLine(";");

		return builder;
	}

	protected static bool GenerateMember(
		string indent,
		StringBuilder builder,
		GenFileOptions options,
		string name,
		string neutralValue,
		IXmlLineInfo line,
		HashSet<string> alreadyAddedMembers,
		List<Diagnostic> errorsAndWarnings,
		string containerClassName,
		out bool resourceAccessByName
	) //Check
	{
		string memberName;

		if (RegexDefinitions.ValidMemberNamePattern.IsMatch(name))
		{
			memberName = name;
			resourceAccessByName = true;
		}
		else
		{
			memberName = RegexDefinitions.InvalidMemberNameSymbols.Replace(name, "_");
			resourceAccessByName = false;
		}

		if (!alreadyAddedMembers.Add(memberName))
		{
			errorsAndWarnings.Add(Diagnostic.Create(
				descriptor: Rules.DuplicateWarning,
				location: GetMemberLocation(options, line, memberName), memberName
			));
			return false;
		}

		if (memberName == containerClassName)
		{
			errorsAndWarnings.Add(Diagnostic.Create(
				descriptor: Rules.MemberSameAsClassWarning,
				location: GetMemberLocation(options, line, memberName), memberName
			));
			return false;
		}

		builder.AppendLine();

		builder.Append(indent);
		builder.AppendLine("/// <summary>");

		builder.Append(indent);
		builder.Append("/// Looks up a localized string similar to ");
		builder.Append(neutralValue.ToXmlCommentSafe(indent));
		builder.AppendLine(".");

		builder.Append(indent);
		builder.AppendLine("/// </summary>");

		builder.Append(indent);
		builder.Append("public ");
		builder.Append(options.StaticMembers ? "static " : string.Empty);
		builder.Append("string");
		builder.Append(options.NullForgivingOperators ? null : "?");
		builder.Append(" ");
		builder.Append(memberName);
		return true;
	}

	protected static IEnumerable<(string key, string value, IXmlLineInfo line)>? ReadResxFile(SourceText content)
	{
		using var reader = new StringReader(content.ToString());

		if (XDocument.Load(reader, LoadOptions.SetLineInfo).Root is { } element)
			return element
				.Descendants()
				.Where(static data => data.Name == "data")
				.Select(static data => (
					key: data.Attribute("name")!.Value,
					value: data.Descendants("value").First().Value,
					line: (IXmlLineInfo)data.Attribute("name")!
				));

		return null;
	}
	protected static void AppendResourceManagerUsings(StringBuilder builder)
	{
		builder.Append("using ");
		builder.Append(Constants.SystemGlobalization);
		builder.AppendLine(";");

		builder.Append("using ");
		builder.Append(Constants.SystemResources);
		builder.AppendLine(";");

		builder.AppendLine();
	}

	protected static void AppendCodeUsings(StringBuilder builder)
	{
		builder.AppendLine("using static Aigamo.ResXGenerator.Helpers;");
		builder.AppendLine();
	}

	protected static void GenerateResourceManagerMembers(
		StringBuilder builder,
		string indent,
		string containerClassName,
		GenFileOptions options
	)
	{
		builder.Append(indent);
		builder.Append("private static ");
		builder.Append(nameof(ResourceManager));
		builder.Append("? ");
		builder.Append(Constants.SResourceManagerVariable);
		builder.AppendLine(";");

		builder.Append(indent);
		builder.Append("public static ");
		builder.Append(nameof(ResourceManager));
		builder.Append(" ");
		builder.Append(Constants.ResourceManagerVariable);
		builder.Append(" => ");
		builder.Append(Constants.SResourceManagerVariable);
		builder.Append(" ??= new ");
		builder.Append(nameof(ResourceManager));
		builder.Append("(\"");
		builder.Append(options.EmbeddedFilename);
		builder.Append("\", typeof(");
		builder.Append(containerClassName);
		builder.AppendLine(").Assembly);");

		builder.Append(indent);
		builder.Append("public ");
		builder.Append(options.StaticMembers ? "static " : string.Empty);
		builder.Append(nameof(CultureInfo));
		builder.Append("? ");
		builder.Append(Constants.CultureInfoVariable);
		builder.AppendLine(" { get; set; }");
	}

	protected static string FunctionNamePostFix(IReadOnlyList<(string Name, int LCID, AdditionalTextWithHash FileWithHash)>? definedLanguages) => string.Join("_", definedLanguages?.Select(x => x.LCID) ?? []);
}
