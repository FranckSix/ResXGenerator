using System.Collections.Immutable;
using Aigamo.ResXGenerator.Extensions;
using Aigamo.ResXGenerator.Models;
using Aigamo.ResXGenerator.Tools;

namespace Aigamo.ResXGenerator.Generators;

public sealed class LocalizerGlobalRegisterGenerator : GeneratorBase<ImmutableArray<GenFilesNamespace>>, IGlobalRegisterGenerator
{
    public override GeneratedOutput Generate(ImmutableArray<GenFilesNamespace> options, CancellationToken cancellationToken = default)
    {
        Init(options);

        GeneratedFileName = "Aigamo.ResXGenerator.Registers.g.cs";

        var sourceCode = $$"""
                           {{Constants.AutoGeneratedHeader}}
                           {{Options.All(f => f.NullForgivingOperator).InterpolateCondition("#nullable disable", "#nullable enable")}}
                           using Microsoft.Extensions.DependencyInjection;
                           {{string.Join(Environment.NewLine, Options.Select(GenerateUsing))}}
                           
                           namespace ResXGenerator.Registration;
                           
                           public static class ResXGeneratorRegistrationExtension
                           {
                               public static IServiceCollection UsingResXGenerator(this IServiceCollection services)
                               {
                           {{string.Join(Environment.NewLine, Options.Select(GenerateRegisterCall)).Indent(2)}}
                           
                                   return services;
                               }
                           }
                           """;

        return GetOutput(sourceCode);
    }

    private static string GenerateRegisterCall(GenFilesNamespace nsur) => $"services.{nsur.NameOfUsingMethodRegistration}();";

    private static string GenerateUsing(GenFilesNamespace nsur) => $"using {nsur.Namespace};";
}
