using Aigamo.ResXGenerator.Extensions;
using Aigamo.ResXGenerator.Models;
using Aigamo.ResXGenerator.Tools;

namespace Aigamo.ResXGenerator.Generators;

public sealed class LocalizerGenerator : GeneratorBase<GenFileOptions>, IResXGenerator
{
	public override GeneratedOutput Generate(GenFileOptions options, CancellationToken cancellationToken = default)
	{
		Init(options);
		var generatedFileName = $"{options.LocalNamespace}.{options.ClassName}.g.cs";

		Content = options.GroupedFile.MainFile.File.GetText(cancellationToken);
		if (Content is null) return new GeneratedOutput(options.GroupedFile.MainFile.File.Path, "//ERROR reading file:", []);

		Validator.ValidateInconsistentNameSpace(Options);
		Validator.ValidateLocalizationModifiers(Options);

		var sourceCode = GenerateResourceManager();

		return new GeneratedOutput(generatedFileName, sourceCode, Validator.ErrorsAndWarnings);
	}

	//Note with StringLocalization injection work with singleton or transient
	//No static class where allowed
	private string GenerateResourceManager()
	{
		var fallback = ReadResxFile(Content)?.ToList();

		return fallback is null
			? "//could not read {0} or one of its children"
			: $$"""
				{{Constants.AutoGeneratedHeader}}
				{{Options.NullForgivingOperators.InterpolateCondition("#nullable disable", "#nullable enable")}}
				using Microsoft.Extensions.Localization;
				using System.Text;

				namespace {{Options.LocalNamespace}};

				public interface I{{Options.ClassName}}
				{
					{{string.Join(Environment.NewLine, fallback.Select(GenerateInterfaceMembers)).Indent()}}
				}

				{{Options.PublicClass.InterpolateCondition("public", "internal")}} class {{Options.ClassName}}(IStringLocalizer<{{Options.ClassName}}> stringLocalizer) : I{{Options.ClassName}}
				{
					{{string.Join(Environment.NewLine, fallback.Select(GenerateMembers)).Indent()}}
				}
				""";
	}

	private string GenerateMembers(FallBackItem fallbackItem) => !Validator.ValidateMember(fallbackItem, Options) ?
		$"// Skipped invalid member name: {fallbackItem.Key}" :
		$"public string {fallbackItem.Key} => stringLocalizer[\"{fallbackItem.Key}\"];";

	private static string GenerateInterfaceMembers(FallBackItem fallbackItem) =>
		$$"""
		/// <summary>
		/// Looks up a localized string similar to {{fallbackItem.Value.ToXmlCommentSafe()}}.
		/// </summary>
		string {{fallbackItem.Key}} {get;}
		""";
}
