using Aigamo.ResXGenerator.Extensions;
using Aigamo.ResXGenerator.Models;
using Aigamo.ResXGenerator.Tools;

namespace Aigamo.ResXGenerator.Generators;

public sealed class LocalizerRegisterGenerator : GeneratorBase<GenFilesNamespace>, ILocalRegisterGenerator
{
	public override GeneratedOutput Generate(GenFilesNamespace options, CancellationToken cancellationToken = default)
	{
		Init(options);

		var generatedFileName = $"{options.Namespace}.Registers.g.cs";

		var sourceCode = GenerateResourceRegistration(options);

		return new GeneratedOutput(generatedFileName, sourceCode, Validator.ErrorsAndWarnings);
	}

	private string GenerateResourceRegistration(GenFilesNamespace options)
	{
		var items = options.Files.Select(f => f.ClassName).ToList();

		return $$"""
				{{Constants.AutoGeneratedHeader}}
				{{Options.NullForgivingOperator.InterpolateCondition("#nullable disable", "#nullable enable")}}
				using Microsoft.Extensions.DependencyInjection;

				namespace {{options.Namespace}};

				public static class {{options.SafeNamespaceName}}RegistrationExtensions
				{
					public static IServiceCollection {{options.NameOfUsingMethodRegistration}}(this IServiceCollection services)
					{
						{{string.Join(Constants.NewLine, items.Select(GenerateRegistrationCalls)).Indent(2)}}
						return services;
					}
				}
				""";
	}

	private static string GenerateRegistrationCalls(string className) => $"services.AddSingleton<I{className},{className}>();";
}
