using System.Text;
using System.Text.RegularExpressions;
using System.Xml;
using System.Xml.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Aigamo.ResXGenerator;

public sealed partial class StringBuilderGenerator
{
    private static readonly Regex s_validMemberNamePattern = new(
        pattern: @"^[\p{L}\p{Nl}_][\p{Cf}\p{L}\p{Mc}\p{Mn}\p{Nd}\p{Nl}\p{Pc}]*$",
        options: RegexOptions.Compiled | RegexOptions.CultureInvariant
    );

    private static readonly Regex s_invalidMemberNameSymbols = new(
        pattern: @"[^\p{Cf}\p{L}\p{Mc}\p{Mn}\p{Nd}\p{Nl}\p{Pc}]",
        options: RegexOptions.Compiled | RegexOptions.CultureInvariant
    );

    public (
        string GeneratedFileName,
        string SourceCode,
        IEnumerable<Diagnostic> ErrorsAndWarnings
    ) Generate(
        FileOptions options,
        CancellationToken cancellationToken = default
    )
    {
        var errorsAndWarnings = new List<Diagnostic>();
        var generatedFileName = $"{options.LocalNamespace}.{options.ClassName}.g.cs";

        var content = options.GroupedFile.MainFile.File.GetText(cancellationToken);
        if (content is null) return (generatedFileName, "//ERROR reading file:" + options.GroupedFile.MainFile.File.Path, errorsAndWarnings);

        var factory = new TemplatesFactory(options.ClassName)
        {
            IsClassPublic = options.PublicClass,
            IsClassStatic = options.StaticClass,
            IsClassPartial = options.PartialClass,
            GeneratedCode = options.GenerateCode,
            WithNamespaces = options.CustomToolNamespace ?? options.LocalNamespace,
            
        };

        var builder = new StringBuilder();

        if (options.InnerClassVisibility != InnerClassVisibility.NotGenerated)
        {
            factory.InnerClassInstanceName = options.InnerClassInstanceName;
            factory.InnerClassName = string.IsNullOrEmpty(options.InnerClassName) ? "Resources" : options.InnerClassName;
            if (!string.IsNullOrEmpty(options.InnerClassInstanceName) && (options.StaticClass || options.StaticMembers))
            {
                errorsAndWarnings.Add(Diagnostic.Create(
                    descriptor: Rules.s_memberWithStaticError,
                    location: Location.Create(
                        filePath: options.GroupedFile.MainFile.File.Path,
                        textSpan: new TextSpan(),
                        lineSpan: new LinePositionSpan()
                    )
                ));
            }
        }

        builder.AppendLine(factory.AutoGeneratedClass);

        if (options.GenerateCode)
            GenerateCode(options, content, builder, errorsAndWarnings, cancellationToken);
        else
            GenerateResourceManager(options, content, builder, errorsAndWarnings, cancellationToken);

        return (
            GeneratedFileName: generatedFileName,
            SourceCode: builder.ToString().IndentCode(),
            ErrorsAndWarnings: errorsAndWarnings
        );
    }

    private static IEnumerable<(string key, string value, IXmlLineInfo line)>? ReadResxFile(SourceText content)
    {
        using var reader = new StringReader(content.ToString());

        if (XDocument.Load(reader, LoadOptions.SetLineInfo).Root is { } element)
            return element
                .Descendants()
                .Where(static data => data.Name == "data")
                .Select(static data => (
                    key: data.Attribute("name")!.Value,
                    value: data.Descendants("value").First().Value,
                    line: (IXmlLineInfo)data.Attribute("name")!
                ));

        return null;
    }

    private static string GenerateMember(
        TemplatesFactory factory,
        FileOptions options,
        string name,
        string neutralValue,
        IXmlLineInfo line,
        List<Diagnostic> errorsAndWarnings) => GenerateMember(factory, options, name, neutralValue, line, errorsAndWarnings, _);

    private static string GenerateMember(
        TemplatesFactory factory,
        FileOptions options,
        string name,
        string neutralValue,
        IXmlLineInfo line,
        List<Diagnostic> errorsAndWarnings,
        out bool resourceAccessByName
    )
    {
        string memberName;

        if (s_validMemberNamePattern.IsMatch(name))
        {
            memberName = name;
            resourceAccessByName = true;
        }
        else
        {
            memberName = s_invalidMemberNameSymbols.Replace(name, "_");
            resourceAccessByName = false;
        }

        if (memberName == options.ClassName)
        {
            errorsAndWarnings.Add(Diagnostic.Create(
                descriptor: Rules.s_memberSameAsClassWarning,
                location: GetMemberLocation(options, line, memberName), memberName
            ));
            return string.Empty;
        }

        return factory.AutoGenerateClassMember(name, neutralValue.TrimAndNormalize());
    }

    private static Location GetMemberLocation(FileOptions fileOptions, IXmlLineInfo line, string memberName) =>
        Location.Create(
            filePath: fileOptions.GroupedFile.MainFile.File.Path,
            textSpan: new TextSpan(),
            lineSpan: new LinePositionSpan(
                start: new LinePosition(line.LineNumber - 1, line.LinePosition - 1),
                end: new LinePosition(line.LineNumber - 1, line.LinePosition - 1 + memberName.Length)
            )
        );
}
