using Aigamo.ResXGenerator.Extensions;
using Aigamo.ResXGenerator.Generators;
using Aigamo.ResXGenerator.Tools;
using FluentAssertions;
using Microsoft.CodeAnalysis;
using Xunit;

namespace Aigamo.ResXGenerator.Tests;

public class GeneratorLocalizerTests
{
	private static void Generate(
		IResXGenerator generator,
		bool publicClass = false,
		bool nullForgivingOperators = false
	)
	{
		var expected =
			$$"""
			// ------------------------------------------------------------------------------
			//	<auto-generated>
			//		This code was generated by a tool.
			//
			//		Changes to this file may cause incorrect behavior and will be lost if
			//		the code is regenerated.
			//	</auto-generated>
			// ------------------------------------------------------------------------------
			{{nullForgivingOperators.InterpolateCondition("#nullable disable", "#nullable enable")}}
			using Microsoft.Extensions.Localization;
			using System.Text;

			namespace VocaDb.Web.App_GlobalResources;

			public interface IActivityEntrySortRuleNames
			{
				/// <summary>
				/// Looks up a localized string similar to Oldest.
				/// </summary>
				string CreateDate {get;}
				/// <summary>
				/// Looks up a localized string similar to Newest.
				/// </summary>
				string CreateDateDescending {get;}
			}

			{{publicClass.InterpolateCondition("public", "internal")}} class ActivityEntrySortRuleNames(IStringLocalizer<ActivityEntrySortRuleNames> stringLocalizer) : IActivityEntrySortRuleNames
			{
				public string CreateDate => stringLocalizer["CreateDate"];
				public string CreateDateDescending => stringLocalizer["CreateDateDescending"];
			}
			""";

		var result = generator.Generate(
			options: new GenFileOptions
			{
				LocalNamespace = "VocaDb.Web.App_GlobalResources",
				EmbeddedFilename = "VocaDb.Web.App_GlobalResources.ActivityEntrySortRuleNames",
				GenerationType = GenerationType.StringLocalizer,
				ClassName = "ActivityEntrySortRuleNames",
				GroupedFile = new GroupedAdditionalFile(
					mainFile: new AdditionalTextWithHash(new AdditionalTextStub("", CodeResXTestsHelpers.GetText()), Guid.NewGuid()),
					subFiles: []
				),
				PublicClass = publicClass,
				NullForgivingOperators = nullForgivingOperators
			}
		);
		result.ErrorsAndWarnings.Should().BeNullOrEmpty();
		result.SourceCode.ReplaceLineEndings().Should().Be(expected.ReplaceLineEndings());
	}

	[Fact]
	public void Generate_Localizer_Public()
	{
		var generator = new LocalizerGenerator();
		Generate(generator);
		Generate(generator, publicClass: true);
	}

	[Fact]
	public void Generate_Localizer_NullForgivingOperators()
	{
		var generator = new LocalizerGenerator();
		Generate(generator);
		Generate(generator, nullForgivingOperators: true);
	}

	[Fact]
	public void Generate_Localizer_NewLine()
	{
		const string expected =
			"""
			// ------------------------------------------------------------------------------
			//	<auto-generated>
			//		This code was generated by a tool.
			//
			//		Changes to this file may cause incorrect behavior and will be lost if
			//		the code is regenerated.
			//	</auto-generated>
			// ------------------------------------------------------------------------------
			#nullable enable
			using Microsoft.Extensions.Localization;
			using System.Text;

			namespace VocaDb.Web.App_GlobalResources;

			public interface ICommonMessages
			{
				/// <summary>
				/// Looks up a localized string similar to This entry has been deleted. It is still temporarily accessible, but won&#39;t show up in any of the listings..
				/// </summary>
				string EntryDeleted {get;}
				/// <summary>
				/// Looks up a localized string similar to This entry was merged to.
				/// </summary>
				string EntryMergedTo {get;}
				/// <summary>
				/// Looks up a localized string similar to Draft = entry is missing crucial information. This status indicates that you&#39;re requesting additional information to be added or corrected.&lt;br /&gt;
				/// Finished = The entry has all the necessary information, but it hasn&#39;t been inspected by a trusted user yet.&lt;br /&gt;
				/// Approved = The entry has been inspected and approved by a trusted user. Approved entries can only be edited by trusted users..
				/// </summary>
				string EntryStatusExplanation {get;}
				/// <summary>
				/// Looks up a localized string similar to This entry is locked, meaning that only moderators are allowed to edit it..
				/// </summary>
				string Locked {get;}
				/// <summary>
				/// Looks up a localized string similar to Choose the language for this name. &quot;Original&quot; is the name in original language that isn&#39;t English, for example Japanese. If the original language is English, do not input a name in the &quot;Original&quot; language..
				/// </summary>
				string NameLanguageHelp {get;}
				/// <summary>
				/// Looks up a localized string similar to This page revision has been hidden..
				/// </summary>
				string RevisionHidden {get;}
			}

			internal class CommonMessages(IStringLocalizer<CommonMessages> stringLocalizer) : ICommonMessages
			{
				public string EntryDeleted => stringLocalizer["EntryDeleted"];
				public string EntryMergedTo => stringLocalizer["EntryMergedTo"];
				public string EntryStatusExplanation => stringLocalizer["EntryStatusExplanation"];
				public string Locked => stringLocalizer["Locked"];
				public string NameLanguageHelp => stringLocalizer["NameLanguageHelp"];
				public string RevisionHidden => stringLocalizer["RevisionHidden"];
			}
			""";
		var generator = new LocalizerGenerator();
		var result = generator.Generate(
			options: new GenFileOptions
			{
				LocalNamespace = "VocaDb.Web.App_GlobalResources",
				EmbeddedFilename = "VocaDb.Web.App_GlobalResources.CommonMessages",
				GenerationType = GenerationType.StringLocalizer,
				ClassName = "CommonMessages",
				GroupedFile = new GroupedAdditionalFile(
					mainFile: new AdditionalTextWithHash(new AdditionalTextStub("", CodeResXTestsHelpers.GetTextWithNewline()), Guid.NewGuid()),
					subFiles: []
				)
			}
		);
		result.ErrorsAndWarnings.Should().BeNullOrEmpty();
		result.SourceCode.ReplaceLineEndings().Should().Be(expected.ReplaceLineEndings());
	}

	[Fact]
	public void Generate_Localizer_Name_DuplicateDataGivesWarning()
	{
		var generator = new LocalizerGenerator();
		var result = generator.Generate(
			options: new GenFileOptions
			{
				LocalNamespace = "VocaDb.Web.App_GlobalResources",
				EmbeddedFilename = "VocaDb.Web.App_GlobalResources.CommonMessages",
				GroupedFile = new GroupedAdditionalFile(
					mainFile: new AdditionalTextWithHash(new AdditionalTextStub("", CodeResXTestsHelpers.GetDaTextWithDuplicates()), Guid.NewGuid()),
					subFiles: []
				),
				GenerationType = GenerationType.StringLocalizer,
				ClassName = "CommonMessages"
			}
		);
		var errs = result.ErrorsAndWarnings.ToList();
		errs.Should().NotBeNull();
		errs.Should().HaveCount(1);
		errs[0].Id.Should().Be(Analyser.DuplicateWarning.Id);
		errs[0].Severity.Should().Be(DiagnosticSeverity.Warning);
		errs[0].GetMessage().Should().Contain("DupKey");
		errs[0].Location.GetLineSpan().StartLinePosition.Line.Should().Be(5);
	}

	[Fact]
	public void Generate_Localizer_Name_MemberSameAsFileGivesWarning()
	{
		const string text =
			"""
			<?xml version="1.0" encoding="utf-8"?>
			<root>
				<data name="CommonMessages" xml:space="preserve">
					<value>Works.</value>
				</data>
			</root>
			""";

		var generator = new LocalizerGenerator();
		var results = generator.Generate(
			options: new GenFileOptions
			{
				LocalNamespace = "VocaDb.Web.App_GlobalResources",
				EmbeddedFilename = "VocaDb.Web.App_GlobalResources.CommonMessages",
				GroupedFile = new GroupedAdditionalFile(
					mainFile: new AdditionalTextWithHash(new AdditionalTextStub("", text), Guid.NewGuid()),
					subFiles: []
				),
				GenerationType = GenerationType.StringLocalizer,
				ClassName = "CommonMessages"
			}
		);
		var errs = results.ErrorsAndWarnings.ToList();
		errs.Should().NotBeNull();
		errs.Should().HaveCount(1);
		errs[0].Id.Should().Be(Analyser.MemberSameAsClassWarning.Id);
		errs[0].Severity.Should().Be(DiagnosticSeverity.Warning);
		errs[0].GetMessage().Should().Contain("CommonMessages");
		errs[0].Location.GetLineSpan().StartLinePosition.Line.Should().Be(2);
	}

	[Fact]
	public void Generate_Localizer_StaticAndPartial_Options_Prohibited()
	{
		const string text =
			"""
			<?xml version="1.0" encoding="utf-8"?>
			<root>
				<data name="Definition" xml:space="preserve">
					<value>Works.</value>
				</data>
			</root>
			""";

		var generator = new LocalizerGenerator();
		var results = generator.Generate(
			options: new GenFileOptions
			{
				LocalNamespace = "VocaDb.Web.App_GlobalResources",
				EmbeddedFilename = "VocaDb.Web.App_GlobalResources.CommonMessages",
				GroupedFile = new GroupedAdditionalFile(
					mainFile: new AdditionalTextWithHash(new AdditionalTextStub("", text), Guid.NewGuid()),
					subFiles: []
				),
				GenerationType = GenerationType.StringLocalizer,
				ClassName = "CommonMessages",
				StaticClass = true,
				PartialClass = true
			}
		);
		var errs = results.ErrorsAndWarnings.ToList();
		errs.Should().NotBeNull();
		errs.Should().HaveCount(2);
		errs[0].Id.Should().Be(Analyser.LocalizerStaticError.Id);
		errs[0].Severity.Should().Be(DiagnosticSeverity.Warning);
		errs[1].Id.Should().Be(Analyser.LocalizerPartialError.Id);
		errs[1].Severity.Should().Be(DiagnosticSeverity.Warning);
	}

	[Fact]
	public void Generate_Localizer_CustomNamespace_Option_Prohibited()
	{
		const string text =
			"""
			<?xml version="1.0" encoding="utf-8"?>
			<root>
				<data name="Definition" xml:space="preserve">
					<value>Works.</value>
				</data>
			</root>
			""";

		var generator = new LocalizerGenerator();
		var results = generator.Generate(
			options: new GenFileOptions
			{
				LocalNamespace = "VocaDb.Web.App_GlobalResources",
				CustomToolNamespace = "Resources",
				EmbeddedFilename = "VocaDb.Web.App_GlobalResources.CommonMessages",
				GroupedFile = new GroupedAdditionalFile(
					mainFile: new AdditionalTextWithHash(new AdditionalTextStub("", text), Guid.NewGuid()),
					subFiles: []
				),
				GenerationType = GenerationType.StringLocalizer,
				ClassName = "CommonMessages"
			}
		);
		var errs = results.ErrorsAndWarnings.ToList();
		errs.Should().NotBeNull();
		errs.Should().HaveCount(1);
		errs[0].Id.Should().Be(Analyser.LocalizationIncoherentNamespace.Id);
		errs[0].Severity.Should().Be(DiagnosticSeverity.Warning);
	}
}
