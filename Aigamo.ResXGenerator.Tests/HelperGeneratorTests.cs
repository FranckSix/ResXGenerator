using FluentAssertions;
using Xunit;

namespace Aigamo.ResXGenerator.Tests;

public class HelperGeneratorTests
{
    [Fact]
    public void CanGenerateCombo()
    {
        var (generatedFileName, sourceCode, errorsAndWarnings) = new StringBuilderGenerator()
            .Generate(
                combo: new CultureInfoCombo(
                    files: [
                        new AdditionalTextWithHash(new AdditionalTextStub("test.da.rex"), Guid.NewGuid()),
                        new AdditionalTextWithHash(new AdditionalTextStub("test.da-dk.rex"), Guid.NewGuid())
                    ]
                ),
                cancellationToken: CancellationToken.None
            );

        const string expected = """
                                // ------------------------------------------------------------------------------
                                // <auto-generated>
                                //     This code was generated by a tool.
                                //
                                //     Changes to this file may cause incorrect behavior and will be lost if
                                //     the code is regenerated.
                                // </auto-generated>
                                // ------------------------------------------------------------------------------
                                #nullable enable
                                namespace Aigamo.ResXGenerator;
                                
                                internal static partial class Helpers
                                {
                                    public static string GetString_1030_6(string fallback, string da_DK, string da) => System.Globalization.CultureInfo.CurrentUICulture.LCID switch
                                    {
                                        1030 => da_DK,
                                        6 => da,
                                        _ => fallback
                                    };
                                }

                                """;

        Compare(expected, sourceCode);

        errorsAndWarnings.Should().BeNullOrEmpty();
        generatedFileName.Should().Be("Aigamo.ResXGenerator.1030_6.g.cs");
        sourceCode.Should().Be(expected);
    }

    [Fact]
    public void CanGenerateEmptyCombo()
    {
        var (generatedFileName, sourceCode, errorsAndWarnings) =
            new StringBuilderGenerator().Generate(new CultureInfoCombo(), CancellationToken.None);
        const string expected = """
                                // ------------------------------------------------------------------------------
                                // <auto-generated>
                                //     This code was generated by a tool.
                                //
                                //     Changes to this file may cause incorrect behavior and will be lost if
                                //     the code is regenerated.
                                // </auto-generated>
                                // ------------------------------------------------------------------------------
                                #nullable enable
                                namespace Aigamo.ResXGenerator;
                                
                                internal static partial class Helpers
                                {
                                    public static string GetString_(string fallback) => System.Globalization.CultureInfo.CurrentUICulture.LCID switch
                                    {
                                        _ => fallback
                                    };
                                }

                                """;

        Compare(expected, sourceCode);

        errorsAndWarnings.Should().BeNullOrEmpty();
        generatedFileName.Should().Be("Aigamo.ResXGenerator..g.cs");
        sourceCode.Should().Be(expected);
    }

    ///Todo: Temporaire pour d√©boggage
    private void Compare(string expected, string actual)
    {
        for (int i = 0; i < Math.Min(expected.Length, actual.Length); i++)
        {
            expected[i].Should().Be(actual[i], $"Diff at index {i}: expected '{(int)expected[i]}', actual '{(int)actual[i]}'");
        }
    }
}

